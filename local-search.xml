<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>求一个区间内最短的不相交区间的最大区间数</title>
    <link href="/2020/11/16/%E6%B1%82%E4%B8%80%E4%B8%AA%E5%8C%BA%E9%97%B4%E5%86%85%E6%9C%80%E7%9F%AD%E7%9A%84%E4%B8%8D%E7%9B%B8%E4%BA%A4%E5%8C%BA%E9%97%B4%E7%9A%84%E6%9C%80%E5%A4%A7%E5%8C%BA%E9%97%B4%E6%95%B0/"/>
    <url>/2020/11/16/%E6%B1%82%E4%B8%80%E4%B8%AA%E5%8C%BA%E9%97%B4%E5%86%85%E6%9C%80%E7%9F%AD%E7%9A%84%E4%B8%8D%E7%9B%B8%E4%BA%A4%E5%8C%BA%E9%97%B4%E7%9A%84%E6%9C%80%E5%A4%A7%E5%8C%BA%E9%97%B4%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这是典型的贪心问题。</p><p>题目：</p><p>（1）问题描述：给定x 轴上n 个闭区间。去掉尽可能少的闭区间，使剩下的闭区间都不相交。</p><p>（2）编程任务：给定n 个闭区间，编程计算去掉的最少闭区间数。</p><p>（3）数据输入：第一行是正整数n，表示闭区间数。接下来的n行中，每行有2 个整数，分别表示闭区间的2个端点。</p><p>（4）结果输出:计算出的去掉的最少闭区间数。</p><p>（5）输入示例</p><p>3</p><p>10 20</p><p>10 15</p><p>20 15</p><p>（6）输出文件示例 　　2</p><h4 id="这类题的解决思路："><a href="#这类题的解决思路：" class="headerlink" title="这类题的解决思路："></a>这类题的解决思路：</h4><p>我们需要的是不重叠的区间最多有多少个，那最好的办法就是对区间右端进行排序。因为一个区间结束的越早，后面才能选出越多的区间。</p><p>上代码</p><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN=<span class="hljs-number">100</span>;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int</span> l,r;&#125;a[MAXN];<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node a,node b)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">return</span> a.r &lt; b.r;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">cin</span> &gt;&gt; n；    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)    &#123;        <span class="hljs-keyword">int</span> u,v;        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v;        a[i].l = <span class="hljs-built_in">min</span>(u,v);        a[i].r = <span class="hljs-built_in">max</span>(u,v);    &#125;    sort(a, a+n, cmp);<span class="hljs-comment">//对区间右端进行排序</span>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">1</span>, tmp=<span class="hljs-number">0</span>;    <span class="hljs-comment">//下面为这种思路的主要部分：</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)        <span class="hljs-keyword">if</span>(a[i].l &gt;= tmp)&#123;            ans++;            tmp=a[i].r;        &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="难度up"><a href="#难度up" class="headerlink" title="难度up"></a><em>难度up</em></h3><h5 id="题目概要："><a href="#题目概要：" class="headerlink" title="题目概要："></a>题目概要：</h5><p>有好多个直的长条，一盘排排放好，给你长条的首尾坐标。 一道可以切开两个坐标之间的位置，用最少的刀数切开所有的长条。</p><h5 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h5><p>第一行是长条数N(2 &lt;= N &lt;= 32000)。 第二行到n + 1行输入每一个长条的首坐标以及长条的长度。</p><h5 id="输出描述："><a href="#输出描述：" class="headerlink" title="输出描述："></a>输出描述：</h5><p>一行表示最少用的长条数。</p><p><em>贪心策略：</em></p><p>为啥说这个切长条也是这种类型呢？</p><p>因为只要区间有重复，表示这个区间一定可以在切其他区间的同时把这个区间切开！ 所以就变成了求最大的不相交区间数量。</p><p>那这个怎么求呢？ 就是按照结束时间来排序。</p><p>为啥按照结束时间来排呢？因为上一个越早结束，下一个开始的时间就越早，选择的空间就越大。</p><p>如果有重复的也没有关系哦，比如1-3和2~3，选啥都无所谓，反正我选了，你就不能选呗。</p><p>然后操作了：</p><p>这个题目可以直接定义一个结构体，然后结构体内置排序。 这里我为了熟悉用pair，所以给pair写了一个排序函数.</p><p>打代码：</p><p>首先输入呗。初始化pair数组。 然后排序。 在判断计数，这里要保存上面的结束时间，因为要判断下一个能不能用嘛。</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAX = <span class="hljs-number">3e4</span> + <span class="hljs-number">2e3</span> + <span class="hljs-number">7</span>;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; a[MAX];<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&amp; u, <span class="hljs-keyword">const</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&amp; v)</span> </span>&#123;    <span class="hljs-keyword">if</span> (u.second == v.second)<span class="hljs-keyword">return</span> u.first &lt; v.first;    <span class="hljs-keyword">return</span> u.second &lt; v.second;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">int</span> n;<span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;        <span class="hljs-keyword">int</span> len;<span class="hljs-built_in">cin</span> &gt;&gt; a[i].first &gt;&gt; len;        a[i].second = a[i].first + len;    &#125;    sort(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + n, cmp);    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>, en = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)        <span class="hljs-keyword">if</span> (en &lt;= a[i].first) &#123;            ans++;            en = a[i].second;        &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快读</title>
    <link href="/2020/11/16/%E5%BF%AB%E8%AF%BB/"/>
    <url>/2020/11/16/%E5%BF%AB%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>有时scanf的读取速度达不到我们的要求，就可用快读。原理就是getchar()比scanf快。</p><pre><code class="hljs awk">inline int read()&#123;    int x=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>;<span class="hljs-regexp">//</span>f代表正负    char ch = getchar();    <span class="hljs-keyword">while</span>(ch&lt;<span class="hljs-string">&#x27;0&#x27;</span> || ch&gt;<span class="hljs-string">&#x27;9&#x27;</span>)&#123;        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">&#x27;-&#x27;</span>)            f = -<span class="hljs-number">1</span>; <span class="hljs-regexp">//</span>意思是如果那组数字里有负号了，            <span class="hljs-regexp">//</span>就让 f 改为-<span class="hljs-number">1</span>记录一下        ch = getchar();    &#125;    <span class="hljs-keyword">while</span>(ch&gt;=<span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)&#123;        x = (x&lt;&lt;<span class="hljs-number">1</span>) + (x&lt;&lt;<span class="hljs-number">3</span>) + (ch^<span class="hljs-number">48</span>);        <span class="hljs-regexp">//</span>等同于x = x*<span class="hljs-number">10</span>+(ch-<span class="hljs-string">&#x27;0&#x27;</span>);         <span class="hljs-regexp">//</span>位运算会比快很多        ch = getchar();    &#125;    return x*f;<span class="hljs-regexp">//</span>这里就是如果有负号的话把负号加上    &#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STL总结</title>
    <link href="/2020/11/16/STL%E6%80%BB%E7%BB%93/"/>
    <url>/2020/11/16/STL%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、栈（stack）"><a href="#一、栈（stack）" class="headerlink" title="一、栈（stack）"></a>一、栈（stack）</h3><p>stack实现了一种先进后出的数据结构，使用时需要包含stack头文件<br>C++定义stack语法：</p><pre><code class="hljs cpp"><span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; s;<span class="hljs-comment">//int为栈的数据类型，可以为string,double等</span></code></pre><p>C++中stack的基本操作有：</p><p>1、出栈：如<br>s.pop() 注意并不返回出栈的元素 </p><p>2、进栈：如 s.push(x) </p><p>3、访问栈顶元素：如s.top(); </p><p>4、判断栈空：如 s.empty() 栈为空时返回true </p><p>5、返回栈中元素个数，如：s.size()</p><h3 id="二、动态数组（vector）"><a href="#二、动态数组（vector）" class="headerlink" title="二、动态数组（vector）"></a>二、动态数组（vector）</h3><p>C++中的vector是一个可以改变大小的数组，当解题时无法知道自己需要的数组规模有多大时可以用vector来达到最大节约空间的目的。使用时需要包含vector头文件。<br>定义一个一维动态数组的语法为</p><pre><code class="hljs cpp"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; a;  <span class="hljs-comment">//int为该动态数组的元素数据类型，可以为string、double等</span></code></pre><p>定义一个二维动态数组的语法为</p><pre><code class="hljs cpp"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>*&gt; a; <span class="hljs-comment">//三维数据类型为int**，以此类推。</span></code></pre><p>C++中vector的基本操作有：</p><p>1、push_back(x) 在数组的最后添加元素x。 </p><p>2、pop_back() 删除最后一个元素，无返回值。 </p><p>3、at(i) 返回位置i的元素。 </p><p>4、begin() 返回一个迭代器，指向第一个元素。 </p><p>5、end() 返回一个迭代器，指向最后一个元素的下一个位置。 </p><p>6、front() 返回数组头的引用。 </p><p>7、capacity(x) 为vector分配空间 </p><p>8、size() 返回数组大小 </p><p>9、resize(x) 改变数组大小，如果x比之前分配的空间大，则自动填充默认值。 </p><p>10、insert 插入元素 </p><p>①a.insert(a.begin(),10); 将10插入到a的起始位置前。 </p><p>②a.insert(a.begin(),3,10) 将10插入到数组位置的0-2处。 </p><p>11、erase 删除元素 </p><p>①a.erase(a.begin()); 将起始位置的元素删除。 </p><p>②a.erase(a.begin(),begin()+2); 将0~2之间的元素删除。 </p><p>12、rbegin() 返回一个逆序迭代器，它指向最后一个元素。 </p><p>13、rend() 返回一个逆序迭代器，它指向的第一个元素前面的位置。 </p><p>14、clear()清空所有元素。<br>这里举一个简单的例子：</p><pre><code>#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;using namespace std;int main()&#123;    vector&lt;int&gt; a;    vector&lt;int&gt; b;    for (int i = 0; i &lt; 10; i++)    //向数组a依次添加0~9        a.push_back(i);    a.swap(b);      //将数组a元素与数组b元素交换    cout &lt;&lt; a.size() &lt;&lt; &quot; &quot; &lt;&lt; b.size() &lt;&lt; endl;    //此时应当输出 0 10    for (vector&lt;int&gt;::iterator it = b.begin(); it != b.end(); it++)//从第一个元素开始遍历数组元素        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;     //依次输出0~9    cout &lt;&lt; endl;    b.erase(b.begin() + 1);     //删除位置1的元素，即元素1.    cout &lt;&lt; b.size() &lt;&lt; endl;   //由于删除了一个元素，此时输出应当为8    for (vector&lt;int&gt;::reverse_iterator rit = b.rbegin(); rit != b.rend(); ++rit)//逆向输出数组元素        cout &lt;&lt; *rit &lt;&lt; &quot; &quot;;    //应当输出9 8 7 6 5 4 3 2 0    cout &lt;&lt; endl;    b.resize(9);    //将数组空间设定为9，相当于比之前多了1个位置    b.push_back(20);//在尾部添加元素20    for (vector&lt;int&gt;::iterator it = b.begin(); it != b.end(); it++)        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;  //应当输出0 2 3 4 5 6 7 8 9 20    return 0;&#125;</code></pre><h3 id="三、集合-set"><a href="#三、集合-set" class="headerlink" title="三、集合(set)"></a>三、集合(set)</h3><p>C++中集合(set)类似于数学上的集合，即每个元素只能出现一次。set的特性是，所有元素都会根据元素的键值自动排序，set的元素不像map那样可以同时拥有实值(value)和键值(key),set元素的键值就是实值，实值就是键值。set不允许两个元素有相同的键值。使用该容器需要包含set头文件。<br>定义一个set的语法为：</p><pre><code class="hljs cpp"><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s; <span class="hljs-comment">//int为集合的数据类型，可以为string,double等</span></code></pre><p>C++中set的基本操作有：</p><p>1、begin() 返回一个迭代器，指向第一个元素。 </p><p>2、end() 返回一个迭代器，指向最后一个元素的下一个位置。 </p><p>3、clear()清空set的所有元素。 </p><p>4、empty() 判断是否为空。 </p><p>5、size() 返回当前元素个数 </p><p>6、erase(it) 删除迭代器指针it指向的元素。 </p><p>7、insert(a) 插入元素a </p><p>8、count() 查找某个元素出现的次数，只有可能为0或1。 </p><p>9、find() 查找某个元素出现的位置，如果找到则返回这个元素的迭代器，如果不存在，则返回s.end()<br>这里举一个简单的例子：</p><pre><code>#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;set&gt;using namespace std;int main()&#123;    set&lt;int&gt; s;    s.insert(20);    s.insert(10);    s.insert(30);    s.insert(10);    cout &lt;&lt; s.size() &lt;&lt; endl; //将输出3，因为集合中元素不能重复    for (set&lt;int&gt;::iterator it = s.begin(); it != s.end(); it++)        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;     //将输出10 20 30，集合会自动排序    cout &lt;&lt; endl;    //将输出1 0    cout &lt;&lt; count(s.begin(), s.end(), 20) &lt;&lt; &quot; &quot; &lt;&lt; count(s.begin(), s.end(), 40) &lt;&lt; endl;    s.erase(s.find(10));    //删除元素10    for (set&lt;int&gt;::iterator it = s.begin(); it != s.end(); it++)        cout &lt;&lt; *it &lt;&lt; &quot; &quot;; //将输出20 30    return 0;&#125;</code></pre><h3 id="四、队列-queue"><a href="#四、队列-queue" class="headerlink" title="四、队列(queue)"></a>四、队列(queue)</h3><p>queue实现了一种先进先出的数据结构，使用时需要包含queue头文件。<br>定义一个queue的语法为：</p><pre><code class="hljs cpp"><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;   <span class="hljs-comment">//int为队列的数据类型，可以为string,double等</span></code></pre><p>C++中queue的基本操作有：</p><p>1、入队，如：q.push(x) 将元素x置于队列的末端 </p><p>2、出队，如: q.pop() 同样不会返回弹出元素的值 </p><p>3、返回队首元素，如：q.front(); </p><p>4、返回队尾元素，如：q.back(); </p><p>5、判断是否为空，如：q.empty(); </p><p>6、返回队列元素个数，如：q.size();<br>这里举一个简单的例子:</p><pre><code>#include &lt;iostream&gt;#include &lt;queue&gt;using namespace std;int main()&#123;    queue&lt;int&gt; q;    for(int i = 0;i &lt; 10;i++)   //将0~9依次入队        q.push(i);    cout &lt;&lt; q.front() &lt;&lt; &quot; &quot; &lt;&lt; q.back() &lt;&lt; endl; //这里应当输出0和9    //依次输出0、1、...、9    for(int i = 0;i &lt; 10;i++)    &#123;        cout &lt;&lt; q.front() &lt;&lt; &quot; &quot;;        q.pop();    &#125;    return 0;&#125;</code></pre><h3 id="五：双端队列（deque）"><a href="#五：双端队列（deque）" class="headerlink" title="五：双端队列（deque）"></a>五：双端队列（deque）</h3><p>这些是deque的一些基本操作：</p><p>push_back(x)/push_front(x) //把x压入后/前端</p><p>back()/front() //访问(不删除)后/前端元素</p><p>pop_back() pop_front() //删除后/前端元素</p><p>empty() //判断deque是否空</p><p>size() //返回deque的元素数量</p><p>clear() //清空deque<br>支持通过sort(d.begin(),d.end())进行排序。</p><h3 id="七：认为的无限大"><a href="#七：认为的无限大" class="headerlink" title="七：认为的无限大"></a>七：认为的无限大</h3><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f</span></code></pre><p>0x3f3f3f3f的十进制是1061109567，也就是10^9级别的（和0x7fffffff（32-bit int的最大值）一个数量级），而一般场合下的数据都是小于10^9的，所以它可以作为无穷大使用而不致出现数据大于无穷大的情形。</p><p>另一方面，由于一般的数据都不会大于10^9，所以当我们把无穷大加上一个数据时，它并不会溢出（这就满足了“无穷大加一个有穷的数依然是无穷大”），事实上0x3f3f3f3f+0x3f3f3f3f=2122219134，这非常大但却没有超过32-bit int的表示范围，所以0x3f3f3f3f还满足了我们“无穷大加无穷大还是无穷大”的需求。</p><p>最大好处：<br>     如果我们想要将某个数组清零，我们通常会使用memset(a,0,sizeof(a))，但是当我们想将某个数组全部赋值为无穷大时（例如解决图论问题时邻接矩阵的初始化），就不能使用memset函数了，因为memset是按字节操作的，它能够对数组清零是因为0的每个字节都是0，现在好了，如果我们将无穷大设为0x3f3f3f3f，那么奇迹就发生了，0x3f3f3f3f的每个字节都是0x3f！<br>     所以要把一段整型数组全部置为无穷大，我们只需要</p><pre><code class="hljs lisp">memset(<span class="hljs-name">a</span>,INF,sizeof(<span class="hljs-name">a</span>))</code></pre><h3 id="七、字符串（String）"><a href="#七、字符串（String）" class="headerlink" title="七、字符串（String）"></a>七、字符串（String）</h3><pre><code class="hljs apache"><span class="hljs-attribute">string</span> s;//默认初始化，一个空字符串<span class="hljs-attribute">string</span> s<span class="hljs-number">1</span>(<span class="hljs-string">&quot;ssss&quot;</span>);//s<span class="hljs-number">1</span>是字面值“ssss”的副本<span class="hljs-attribute">string</span> s<span class="hljs-number">2</span>(s<span class="hljs-number">1</span>);//s<span class="hljs-number">2</span>是s<span class="hljs-number">1</span>的副本<span class="hljs-attribute">string</span> s<span class="hljs-number">3</span>=s<span class="hljs-number">2</span>;//s<span class="hljs-number">3</span>是s<span class="hljs-number">2</span>的副本<span class="hljs-attribute">string</span> s<span class="hljs-number">4</span>(<span class="hljs-number">10</span>,&#x27;c&#x27;);//把s<span class="hljs-number">4</span>初始化<span class="hljs-attribute">string</span> s<span class="hljs-number">5</span>=<span class="hljs-string">&quot;hiya&quot;</span>;//拷贝初始化<span class="hljs-attribute">string</span> s<span class="hljs-number">6</span>=string(<span class="hljs-number">10</span>,&#x27;c&#x27;);//拷贝初始化，生成一个初始化好的对象，拷贝给s<span class="hljs-number">6</span><span class="hljs-attribute">string</span> s<span class="hljs-number">7</span>(cs,<span class="hljs-number">3</span>);//复制字符串cs的前<span class="hljs-number">3</span>个字符到s当中<span class="hljs-attribute">tring</span> s<span class="hljs-number">8</span>=<span class="hljs-string">&quot;asac&quot;</span>;<span class="hljs-attribute">string</span> s<span class="hljs-number">9</span>(s<span class="hljs-number">8</span>,<span class="hljs-number">2</span>);//从s<span class="hljs-number">2</span>的第二个字符开始拷贝，不能超过s<span class="hljs-number">2</span>的size<span class="hljs-attribute">string</span> s<span class="hljs-number">10</span>=<span class="hljs-string">&quot;qweqweqweq&quot;</span>;<span class="hljs-attribute">string</span> s<span class="hljs-number">11</span>(s<span class="hljs-number">10</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);//s<span class="hljs-number">4</span>是s<span class="hljs-number">3</span>从下标<span class="hljs-number">3</span>开始<span class="hljs-number">4</span>个字符的拷贝，超过s<span class="hljs-number">3</span>.size出现未定义</code></pre><h3 id="八、pair类型"><a href="#八、pair类型" class="headerlink" title="八、pair类型"></a>八、pair类型</h3><p>pair定义于头文件utility中，主要的作用是将两个数据组合成一个数据，两个数据可以是同一类型或者不同类型。换句话说，==pair就是一组键值对（key-value）==。其实可以发现，pair本质上是个结构体。<br>一些典型操作</p><pre><code class="hljs armasm"><span class="hljs-symbol">pair</span>&lt;T1,T2&gt; <span class="hljs-built_in">p1</span><span class="hljs-comment">;</span><span class="hljs-symbol">pair</span>&lt;T1,T2&gt; <span class="hljs-built_in">p2</span><span class="hljs-comment">;</span><span class="hljs-symbol">pair</span>&lt;T1,T2&gt; <span class="hljs-built_in">p1</span>(<span class="hljs-built_in">v1</span>,<span class="hljs-built_in">v2</span>)<span class="hljs-comment">;</span><span class="hljs-symbol">p2</span>(<span class="hljs-built_in">v1</span>,<span class="hljs-built_in">v2</span>)<span class="hljs-comment">;</span><span class="hljs-symbol">p1</span> &lt; <span class="hljs-built_in">p2</span><span class="hljs-comment">;</span><span class="hljs-symbol">p1</span> == <span class="hljs-built_in">p2</span><span class="hljs-comment">;</span><span class="hljs-symbol">p.first</span><span class="hljs-comment">;</span><span class="hljs-symbol">p.second</span><span class="hljs-comment">;</span><span class="hljs-symbol">make_pair</span>(<span class="hljs-built_in">v1</span>,<span class="hljs-built_in">v2</span>)<span class="hljs-comment">;//make_pair是一个函数，可以生成pair对象</span><span class="hljs-comment">//例如： </span><span class="hljs-comment">//pair&lt;string,string&gt; next_auth;</span><span class="hljs-comment">//string first,last;</span><span class="hljs-comment">//while (cin &gt;&gt; first &gt;&gt; last)&#123;</span><span class="hljs-comment">//      next_auth = make_pair(first,last);</span><span class="hljs-comment">//&#125;</span></code></pre><p>也可以使用typedef简化声明</p><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-built_in">string</span>,<span class="hljs-built_in">string</span>&gt; name; <span class="hljs-function">name <span class="hljs-title">dotcom</span><span class="hljs-params">(<span class="hljs-string">&quot;is&quot;</span>,<span class="hljs-string">&quot;programmer&quot;</span>)</span></span>;</code></pre><h3 id="九、map类型"><a href="#九、map类型" class="headerlink" title="九、map类型"></a>九、map类型</h3><p>map可以当做一个容器（装载具有一定格式的数据）；pair可以理解为元素（放入到容器的的每个个体），pair并没有单独行动的典型用法，正常都是配合map来使用（即把pair这个元素插入到map这个容器里面）。</p><p>pair与map怎样联系起来：<br>通过map的insert()可以把一个pair对象作为map 的参数，如</p><pre><code class="hljs apache"><span class="hljs-attribute">map1</span>.insert(pair<span class="hljs-number">1</span>&lt;id,grade&gt;);</code></pre><p>==根据key值快速查找记录，查找的复杂度基本是Log(N)==</p><p>（1）数据的插入</p><pre><code class="hljs cpp"><span class="hljs-comment">//数据的插入--第一种：用insert函数插入pair数据</span><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">string</span>&gt; mapStudent;  mapStudent.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">string</span>&gt;(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;student_one&quot;</span>));  <span class="hljs-comment">//第二种：用insert函数插入value_type数据，下面举例说明</span><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">string</span>&gt; mapStudent;  mapStudent.insert(<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">string</span>&gt;::value_type (<span class="hljs-number">1</span>, <span class="hljs-string">&quot;student_one&quot;</span>));    <span class="hljs-comment">//第三种：用数组方式插入数据，下面举例说明</span><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">string</span>&gt; mapStudent;mapStudent[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;student_one&quot;</span>;</code></pre><p>（2）map的大小</p><p>eg.</p><pre><code class="hljs fortran"><span class="hljs-built_in">Int</span> nSize = mapStudent<span class="hljs-number">.</span><span class="hljs-built_in">size</span>();</code></pre><p>(3)查找元素</p><p>第一种：用count函数来判定关键字是否出现，其缺点是无法定位数据出现位置,由于map的特性，一对一的映射关系，就决定了count函数的返回值只有两个，要么是0，要么是1，出现的情况，当然是返回1了</p><p>第二种：用find函数来定位数据出现位置，它返回的一个迭代器，当数据出现时，它返回数据所在位置的迭代器，如果map中没有要查找的数据，它返回的迭代器等于end函数返回的迭代器。</p><h3 id="十、优先队列"><a href="#十、优先队列" class="headerlink" title="十、优先队列"></a>十、优先队列</h3><p>普通的队列是一种先进先出的数据结构，元素在队列尾追加，而从队列头删除。</p><p>在优先队列中，元素被赋予优先级。++当访问元素时，具有最高优先级的元素最先删除++。优先队列具有最高级先出 （==first in, largest out==）的行为特征。</p><p>首先要包含头文件#include<queue>, 他和queue不同的就在于我们可以自定义其中数据的优先级, 让优先级高的排在队列前面,优先出队。</p><p>++优先队列具有队列的所有特性++，包括队列的基本操作，只是在这基础上添加了内部的一个排序，它本质是一个堆实现的。</p><p>和队列基本操作相同:</p><ul><li> top 访问队头元素</li><li>empty 队列是否为空</li><li>size 返回队列内元素个数</li><li>push 插入元素到队尾 (并排序)</li><li>emplace 原地构造一个元素并插入队列</li><li>pop 弹出队头元素</li><li>swap 交换内容</li></ul><p>==定义：priority_queue&lt;Type, Container, Functional&gt;==<br>Type 就是数据类型，Container 就是容器类型（Container必须是用数组实现的容器，比如vector,deque等等，但不能用 list。STL里面默认用的是vector），Functional 就是比较的方式。</p><p>当需要用自定义的数据类型时才需要传入这三个参数，使用基本数据类型时，只需要传入数据类型，默认是大顶堆。</p><pre><code class="hljs reasonml"><span class="hljs-comment">//升序队列，小顶堆</span><span class="hljs-number">2</span> priority_queue &lt;<span class="hljs-built_in">int</span>,vector&lt;<span class="hljs-built_in">int</span>&gt;,greater&lt;<span class="hljs-built_in">int</span>&gt; &gt; q;<span class="hljs-number">3</span> <span class="hljs-comment">//降序队列，大顶堆</span><span class="hljs-number">4</span> priority_queue &lt;<span class="hljs-built_in">int</span>,vector&lt;<span class="hljs-built_in">int</span>&gt;,less&lt;<span class="hljs-built_in">int</span>&gt; &gt;q;<span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-comment">//greater和less是std实现的两个仿函数（就是使一个类的使用看上去像一个函数。其实现就是类中实现一个operator()，这个类就有了类似函数的行为，就是一个仿函数类了）### 一、栈（stack）</span>stack实现了一种先进后出的数据结构，使用时需要包含stack头文件C++定义stack语法：​```stack&lt;<span class="hljs-built_in">int</span>&gt; s;<span class="hljs-comment">//int为栈的数据类型，可以为string,double等</span>​```C++中stack的基本操作有：<span class="hljs-number">1</span>、出栈：如 s.pop<span class="hljs-literal">()</span> 注意并不返回出栈的元素 <span class="hljs-number">2</span>、进栈：如 s.push(x) <span class="hljs-number">3</span>、访问栈顶元素：如s.top<span class="hljs-literal">()</span>; <span class="hljs-number">4</span>、判断栈空：如 s.empty<span class="hljs-literal">()</span> 栈为空时返回<span class="hljs-literal">true</span> <span class="hljs-number">5</span>、返回栈中元素个数，如：s.size<span class="hljs-literal">()</span>   ### 二、动态数组（vector）C++中的vector是一个可以改变大小的数组，当解题时无法知道自己需要的数组规模有多大时可以用vector来达到最大节约空间的目的。使用时需要包含vector头文件。定义一个一维动态数组的语法为​```vector&lt;<span class="hljs-built_in">int</span>&gt; a;  <span class="hljs-comment">//int为该动态数组的元素数据类型，可以为string、double等</span>​```定义一个二维动态数组的语法为​```vector&lt;<span class="hljs-built_in">int</span>*&gt; a; <span class="hljs-comment">//三维数据类型为int**，以此类推。</span>​```C++中vector的基本操作有：<span class="hljs-number">1</span>、push<span class="hljs-constructor">_back(<span class="hljs-params">x</span>)</span> 在数组的最后添加元素x。 <span class="hljs-number">2</span>、pop<span class="hljs-constructor">_back()</span> 删除最后一个元素，无返回值。 <span class="hljs-number">3</span>、at(i) 返回位置i的元素。 <span class="hljs-number">4</span>、<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span> 返回一个迭代器，指向第一个元素。 <span class="hljs-number">5</span>、<span class="hljs-keyword">end</span><span class="hljs-literal">()</span> 返回一个迭代器，指向最后一个元素的下一个位置。 <span class="hljs-number">6</span>、front<span class="hljs-literal">()</span> 返回数组头的引用。 <span class="hljs-number">7</span>、capacity(x) 为vector分配空间 <span class="hljs-number">8</span>、size<span class="hljs-literal">()</span> 返回数组大小 <span class="hljs-number">9</span>、resize(x) 改变数组大小，如果x比之前分配的空间大，则自动填充默认值。 <span class="hljs-number">10</span>、insert 插入元素 ①a.insert(a.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>,<span class="hljs-number">10</span>); 将<span class="hljs-number">10</span>插入到a的起始位置前。 ②a.insert(a.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>,<span class="hljs-number">3</span>,<span class="hljs-number">10</span>) 将<span class="hljs-number">10</span>插入到数组位置的<span class="hljs-number">0</span>-<span class="hljs-number">2</span>处。 <span class="hljs-number">11</span>、erase 删除元素 ①a.erase(a.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>); 将起始位置的元素删除。 ②a.erase(a.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>,<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>+<span class="hljs-number">2</span>); 将<span class="hljs-number">0</span>~<span class="hljs-number">2</span>之间的元素删除。 <span class="hljs-number">12</span>、rbegin<span class="hljs-literal">()</span> 返回一个逆序迭代器，它指向最后一个元素。 <span class="hljs-number">13</span>、rend<span class="hljs-literal">()</span> 返回一个逆序迭代器，它指向的第一个元素前面的位置。 <span class="hljs-number">14</span>、clear<span class="hljs-literal">()</span>清空所有元素。这里举一个简单的例子：    #<span class="hljs-keyword">include</span> &lt;iostream&gt;    #<span class="hljs-keyword">include</span> &lt;algorithm&gt;    #<span class="hljs-keyword">include</span> &lt;vector&gt;    using namespace std;         <span class="hljs-built_in">int</span> main<span class="hljs-literal">()</span>    &#123;        vector&lt;<span class="hljs-built_in">int</span>&gt; a;        vector&lt;<span class="hljs-built_in">int</span>&gt; b;             <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)    <span class="hljs-comment">//向数组a依次添加0~9</span>            a.push<span class="hljs-constructor">_back(<span class="hljs-params">i</span>)</span>;             a.swap(b);      <span class="hljs-comment">//将数组a元素与数组b元素交换</span>        cout &lt;&lt; a.size<span class="hljs-literal">()</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; b.size<span class="hljs-literal">()</span> &lt;&lt; endl;    <span class="hljs-comment">//此时应当输出 0 10</span>             <span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-built_in">int</span>&gt;::iterator it = b.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>; it != b.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>; it++)<span class="hljs-comment">//从第一个元素开始遍历数组元素</span>            cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;     <span class="hljs-comment">//依次输出0~9</span>        cout &lt;&lt; endl;             b.erase(b.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span> + <span class="hljs-number">1</span>);     <span class="hljs-comment">//删除位置1的元素，即元素1.</span>        cout &lt;&lt; b.size<span class="hljs-literal">()</span> &lt;&lt; endl;   <span class="hljs-comment">//由于删除了一个元素，此时输出应当为8</span>             <span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-built_in">int</span>&gt;::reverse_iterator rit = b.rbegin<span class="hljs-literal">()</span>; rit != b.rend<span class="hljs-literal">()</span>; ++rit)<span class="hljs-comment">//逆向输出数组元素</span>            cout &lt;&lt; *rit &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;    <span class="hljs-comment">//应当输出9 8 7 6 5 4 3 2 0</span>        cout &lt;&lt; endl;             b.resize(<span class="hljs-number">9</span>);    <span class="hljs-comment">//将数组空间设定为9，相当于比之前多了1个位置</span>        b.push<span class="hljs-constructor">_back(20)</span>;<span class="hljs-comment">//在尾部添加元素20</span>             <span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-built_in">int</span>&gt;::iterator it = b.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>; it != b.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>; it++)            cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">//应当输出0 2 3 4 5 6 7 8 9 20</span>             return <span class="hljs-number">0</span>;    &#125;### 三、集合(set)C++中集合(set)类似于数学上的集合，即每个元素只能出现一次。set的特性是，所有元素都会根据元素的键值自动排序，set的元素不像map那样可以同时拥有实值(value)和键值(key),set元素的键值就是实值，实值就是键值。set不允许两个元素有相同的键值。使用该容器需要包含set头文件。定义一个set的语法为：​```set&lt;<span class="hljs-built_in">int</span>&gt; s; <span class="hljs-comment">//int为集合的数据类型，可以为string,double等</span>​```C++中set的基本操作有：<span class="hljs-number">1</span>、<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span> 返回一个迭代器，指向第一个元素。 <span class="hljs-number">2</span>、<span class="hljs-keyword">end</span><span class="hljs-literal">()</span> 返回一个迭代器，指向最后一个元素的下一个位置。 <span class="hljs-number">3</span>、clear<span class="hljs-literal">()</span>清空set的所有元素。 <span class="hljs-number">4</span>、empty<span class="hljs-literal">()</span> 判断是否为空。 <span class="hljs-number">5</span>、size<span class="hljs-literal">()</span> 返回当前元素个数 <span class="hljs-number">6</span>、erase(it) 删除迭代器指针it指向的元素。 <span class="hljs-number">7</span>、insert(a) 插入元素a <span class="hljs-number">8</span>、count<span class="hljs-literal">()</span> 查找某个元素出现的次数，只有可能为<span class="hljs-number">0</span>或<span class="hljs-number">1</span>。 <span class="hljs-number">9</span>、find<span class="hljs-literal">()</span> 查找某个元素出现的位置，如果找到则返回这个元素的迭代器，如果不存在，则返回s.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>这里举一个简单的例子：    #<span class="hljs-keyword">include</span> &lt;iostream&gt;    #<span class="hljs-keyword">include</span> &lt;algorithm&gt;    #<span class="hljs-keyword">include</span> &lt;set&gt;    using namespace std;         <span class="hljs-built_in">int</span> main<span class="hljs-literal">()</span>    &#123;        set&lt;<span class="hljs-built_in">int</span>&gt; s;        s.insert(<span class="hljs-number">20</span>);        s.insert(<span class="hljs-number">10</span>);        s.insert(<span class="hljs-number">30</span>);        s.insert(<span class="hljs-number">10</span>);             cout &lt;&lt; s.size<span class="hljs-literal">()</span> &lt;&lt; endl; <span class="hljs-comment">//将输出3，因为集合中元素不能重复</span>        <span class="hljs-keyword">for</span> (set&lt;<span class="hljs-built_in">int</span>&gt;::iterator it = s.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>; it != s.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>; it++)            cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;     <span class="hljs-comment">//将输出10 20 30，集合会自动排序</span>        cout &lt;&lt; endl;             <span class="hljs-comment">//将输出1 0</span>        cout &lt;&lt; count(s.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>, s.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>, <span class="hljs-number">20</span>) &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; count(s.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>, s.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>, <span class="hljs-number">40</span>) &lt;&lt; endl;             s.erase(s.find(<span class="hljs-number">10</span>));    <span class="hljs-comment">//删除元素10</span>        <span class="hljs-keyword">for</span> (set&lt;<span class="hljs-built_in">int</span>&gt;::iterator it = s.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>; it != s.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>; it++)            cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>; <span class="hljs-comment">//将输出20 30</span>        return <span class="hljs-number">0</span>;    &#125;### 四、队列(queue)queue实现了一种先进先出的数据结构，使用时需要包含queue头文件。定义一个queue的语法为：​```queue&lt;<span class="hljs-built_in">int</span>&gt; q;   <span class="hljs-comment">//int为队列的数据类型，可以为string,double等</span>​```C++中queue的基本操作有：<span class="hljs-number">1</span>、入队，如：q.push(x) 将元素x置于队列的末端 <span class="hljs-number">2</span>、出队，如: q.pop<span class="hljs-literal">()</span> 同样不会返回弹出元素的值 <span class="hljs-number">3</span>、返回队首元素，如：q.front<span class="hljs-literal">()</span>; <span class="hljs-number">4</span>、返回队尾元素，如：q.back<span class="hljs-literal">()</span>; <span class="hljs-number">5</span>、判断是否为空，如：q.empty<span class="hljs-literal">()</span>; <span class="hljs-number">6</span>、返回队列元素个数，如：q.size<span class="hljs-literal">()</span>;这里举一个简单的例子:    #<span class="hljs-keyword">include</span> &lt;iostream&gt;    #<span class="hljs-keyword">include</span> &lt;queue&gt;    using namespace std;         <span class="hljs-built_in">int</span> main<span class="hljs-literal">()</span>    &#123;        queue&lt;<span class="hljs-built_in">int</span>&gt; q;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">10</span>;i++)   <span class="hljs-comment">//将0~9依次入队</span>            q.push(i);             cout &lt;&lt; q.front<span class="hljs-literal">()</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; q.back<span class="hljs-literal">()</span> &lt;&lt; endl; <span class="hljs-comment">//这里应当输出0和9</span>             <span class="hljs-comment">//依次输出0、1、...、9</span>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">10</span>;i++)        &#123;            cout &lt;&lt; q.front<span class="hljs-literal">()</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;            q.pop<span class="hljs-literal">()</span>;        &#125;        return <span class="hljs-number">0</span>;    &#125;### 五：双端队列（deque）这些是deque的一些基本操作：push<span class="hljs-constructor">_back(<span class="hljs-params">x</span>)</span>/push<span class="hljs-constructor">_front(<span class="hljs-params">x</span>)</span> <span class="hljs-comment">//把x压入后/前端</span>back<span class="hljs-literal">()</span>/front<span class="hljs-literal">()</span> <span class="hljs-comment">//访问(不删除)后/前端元素</span>pop<span class="hljs-constructor">_back()</span> pop<span class="hljs-constructor">_front()</span> <span class="hljs-comment">//删除后/前端元素</span>empty<span class="hljs-literal">()</span> <span class="hljs-comment">//判断deque是否空</span>size<span class="hljs-literal">()</span> <span class="hljs-comment">//返回deque的元素数量</span>clear<span class="hljs-literal">()</span> <span class="hljs-comment">//清空deque</span>支持通过sort(d.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>,d.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>)进行排序。### 七：认为的无限大​```#define INF <span class="hljs-number">0x3f3f3f3f</span>​```<span class="hljs-number">0x3f3f3f3f</span>的十进制是<span class="hljs-number">1061109567</span>，也就是<span class="hljs-number">10</span>^<span class="hljs-number">9</span>级别的（和<span class="hljs-number">0x7fffffff</span>（<span class="hljs-number">32</span>-bit <span class="hljs-built_in">int</span>的最大值）一个数量级），而一般场合下的数据都是小于<span class="hljs-number">10</span>^<span class="hljs-number">9</span>的，所以它可以作为无穷大使用而不致出现数据大于无穷大的情形。另一方面，由于一般的数据都不会大于<span class="hljs-number">10</span>^<span class="hljs-number">9</span>，所以当我们把无穷大加上一个数据时，它并不会溢出（这就满足了“无穷大加一个有穷的数依然是无穷大”），事实上<span class="hljs-number">0x3f3f3f3f</span>+<span class="hljs-number">0x3f3f3f3f</span>=<span class="hljs-number">2122219134</span>，这非常大但却没有超过<span class="hljs-number">32</span>-bit <span class="hljs-built_in">int</span>的表示范围，所以<span class="hljs-number">0x3f3f3f3f</span>还满足了我们“无穷大加无穷大还是无穷大”的需求。最大好处：     如果我们想要将某个数组清零，我们通常会使用memset(a,<span class="hljs-number">0</span>,sizeof(a))，但是当我们想将某个数组全部赋值为无穷大时（例如解决图论问题时邻接矩阵的初始化），就不能使用memset函数了，因为memset是按字节操作的，它能够对数组清零是因为<span class="hljs-number">0</span>的每个字节都是<span class="hljs-number">0</span>，现在好了，如果我们将无穷大设为<span class="hljs-number">0x3f3f3f3f</span>，那么奇迹就发生了，<span class="hljs-number">0x3f3f3f3f</span>的每个字节都是<span class="hljs-number">0x3f</span>！     所以要把一段整型数组全部置为无穷大，我们只需要     ​```memset(a,INF,sizeof(a))​```### 七、字符串（String）​```    <span class="hljs-built_in">string</span> s;<span class="hljs-comment">//默认初始化，一个空字符串</span>    <span class="hljs-built_in">string</span> s1(<span class="hljs-string">&quot;ssss&quot;</span>);<span class="hljs-comment">//s1是字面值“ssss”的副本</span>    <span class="hljs-built_in">string</span> s2(s1);<span class="hljs-comment">//s2是s1的副本</span>    <span class="hljs-built_in">string</span> s3=s2;<span class="hljs-comment">//s3是s2的副本</span>    <span class="hljs-built_in">string</span> s4(<span class="hljs-number">10</span>,<span class="hljs-character">&#x27;c&#x27;</span>);<span class="hljs-comment">//把s4初始化</span>    <span class="hljs-built_in">string</span> s5=<span class="hljs-string">&quot;hiya&quot;</span>;<span class="hljs-comment">//拷贝初始化</span>    <span class="hljs-built_in">string</span> s6=<span class="hljs-built_in">string</span>(<span class="hljs-number">10</span>,<span class="hljs-character">&#x27;c&#x27;</span>);<span class="hljs-comment">//拷贝初始化，生成一个初始化好的对象，拷贝给s6</span>    <span class="hljs-built_in">string</span> s7(cs,<span class="hljs-number">3</span>);<span class="hljs-comment">//复制字符串cs的前3个字符到s当中</span>    tring s8=<span class="hljs-string">&quot;asac&quot;</span>;    <span class="hljs-built_in">string</span> s9(s8,<span class="hljs-number">2</span>);<span class="hljs-comment">//从s2的第二个字符开始拷贝，不能超过s2的size</span>    <span class="hljs-built_in">string</span> s10=<span class="hljs-string">&quot;qweqweqweq&quot;</span>;    <span class="hljs-built_in">string</span> s11(s10,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<span class="hljs-comment">//s4是s3从下标3开始4个字符的拷贝，超过s3.size出现未定义</span>​```### 八、pair类型pair定义于头文件utility中，主要的作用是将两个数据组合成一个数据，两个数据可以是同一类型或者不同类型。换句话说，==pair就是一组键值对（key-value）==。其实可以发现，pair本质上是个结构体。一些典型操作​```pair&lt;T1,T2&gt; p1;pair&lt;T1,T2&gt; p2;pair&lt;T1,T2&gt; p1(v1,v2);p2(v1,v2);p1 &lt; p2;p1<span class="hljs-operator"> == </span>p2;p.first;p.second;make<span class="hljs-constructor">_pair(<span class="hljs-params">v1</span>,<span class="hljs-params">v2</span>)</span>;<span class="hljs-comment">//make_pair是一个函数，可以生成pair对象</span><span class="hljs-comment">//例如： </span><span class="hljs-comment">//pair&lt;string,string&gt; next_auth;</span><span class="hljs-comment">//string first,last;</span><span class="hljs-comment">//while (cin &gt;&gt; first &gt;&gt; last)&#123;</span><span class="hljs-comment">//      next_auth = make_pair(first,last);</span><span class="hljs-comment">//&#125;</span>​```也可以使用typedef简化声明​```typedef pair&lt;<span class="hljs-built_in">string</span>,<span class="hljs-built_in">string</span>&gt; name; name dotcom(<span class="hljs-string">&quot;is&quot;</span>,<span class="hljs-string">&quot;programmer&quot;</span>);​```### 九、map类型map可以当做一个容器（装载具有一定格式的数据）；pair可以理解为元素（放入到容器的的每个个体），pair并没有单独行动的典型用法，正常都是配合map来使用（即把pair这个元素插入到map这个容器里面）。pair与map怎样联系起来：通过map的insert<span class="hljs-literal">()</span>可以把一个pair对象作为map 的参数，如​```map1.insert(pair1&lt;id,grade&gt;);​```==根据key值快速查找记录，查找的复杂度基本是<span class="hljs-constructor">Log(N)</span>==（<span class="hljs-number">1</span>）数据的插入​```<span class="hljs-comment">//数据的插入--第一种：用insert函数插入pair数据</span>map&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">string</span>&gt; mapStudent;  mapStudent.insert(pair&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">string</span>&gt;(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;student_one&quot;</span>));  <span class="hljs-comment">//第二种：用insert函数插入value_type数据，下面举例说明</span>map&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">string</span>&gt; mapStudent;  mapStudent.insert(map&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">string</span>&gt;::value_type (<span class="hljs-number">1</span>, <span class="hljs-string">&quot;student_one&quot;</span>));    <span class="hljs-comment">//第三种：用数组方式插入数据，下面举例说明</span>map&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">string</span>&gt; mapStudent;mapStudent<span class="hljs-literal">[<span class="hljs-number">1</span>]</span> = <span class="hljs-string">&quot;student_one&quot;</span>;  ​```（<span class="hljs-number">2</span>）map的大小eg.​```Int nSize = mapStudent.size<span class="hljs-literal">()</span>;​```(<span class="hljs-number">3</span>)查找元素第一种：用count函数来判定关键字是否出现，其缺点是无法定位数据出现位置,由于map的特性，一对一的映射关系，就决定了count函数的返回值只有两个，要么是<span class="hljs-number">0</span>，要么是<span class="hljs-number">1</span>，出现的情况，当然是返回<span class="hljs-number">1</span>了第二种：用find函数来定位数据出现位置，它返回的一个迭代器，当数据出现时，它返回数据所在位置的迭代器，如果map中没有要查找的数据，它返回的迭代器等于<span class="hljs-keyword">end</span>函数返回的迭代器。### 十、优先队列普通的队列是一种先进先出的数据结构，元素在队列尾追加，而从队列头删除。在优先队列中，元素被赋予优先级。++当访问元素时，具有最高优先级的元素最先删除++。优先队列具有最高级先出 （==first <span class="hljs-keyword">in</span>, largest out==）的行为特征。 首先要包含头文件#<span class="hljs-keyword">include</span>&lt;queue&gt;, 他和queue不同的就在于我们可以自定义其中数据的优先级, 让优先级高的排在队列前面,优先出队。++优先队列具有队列的所有特性++，包括队列的基本操作，只是在这基础上添加了内部的一个排序，它本质是一个堆实现的。 和队列基本操作相同:-  top 访问队头元素- empty 队列是否为空- size 返回队列内元素个数- push 插入元素到队尾 (并排序)- emplace 原地构造一个元素并插入队列- pop 弹出队头元素- swap 交换内容==定义：priority_queue&lt;Type, Container, Functional&gt;==Type 就是数据类型，Container 就是容器类型（Container必须是用数组实现的容器，比如vector,deque等等，但不能用 <span class="hljs-built_in">list</span>。STL里面默认用的是vector），Functional 就是比较的方式。当需要用自定义的数据类型时才需要传入这三个参数，使用基本数据类型时，只需要传入数据类型，默认是大顶堆。​```<span class="hljs-comment">//升序队列，小顶堆</span><span class="hljs-number">2</span> priority_queue &lt;<span class="hljs-built_in">int</span>,vector&lt;<span class="hljs-built_in">int</span>&gt;,greater&lt;<span class="hljs-built_in">int</span>&gt; &gt; q;<span class="hljs-number">3</span> <span class="hljs-comment">//降序队列，大顶堆</span><span class="hljs-number">4</span> priority_queue &lt;<span class="hljs-built_in">int</span>,vector&lt;<span class="hljs-built_in">int</span>&gt;,less&lt;<span class="hljs-built_in">int</span>&gt; &gt;q;<span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-comment">//greater和less是std实现的两个仿函数（就是使一个类的使用看上去像一个函数。其实现就是类中实现一个operator()，这个类就有了类似函数的行为，就是一个仿函数类了）</span>​```</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/10/23/hello-world/"/>
    <url>/2020/10/23/hello-world/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
